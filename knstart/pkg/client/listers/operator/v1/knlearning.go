/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "knstart/pkg/apis/operator/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KNLearningLister helps list KNLearnings.
type KNLearningLister interface {
	// List lists all KNLearnings in the indexer.
	List(selector labels.Selector) (ret []*v1.KNLearning, err error)
	// KNLearnings returns an object that can list and get KNLearnings.
	KNLearnings(namespace string) KNLearningNamespaceLister
	KNLearningListerExpansion
}

// kNLearningLister implements the KNLearningLister interface.
type kNLearningLister struct {
	indexer cache.Indexer
}

// NewKNLearningLister returns a new KNLearningLister.
func NewKNLearningLister(indexer cache.Indexer) KNLearningLister {
	return &kNLearningLister{indexer: indexer}
}

// List lists all KNLearnings in the indexer.
func (s *kNLearningLister) List(selector labels.Selector) (ret []*v1.KNLearning, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KNLearning))
	})
	return ret, err
}

// KNLearnings returns an object that can list and get KNLearnings.
func (s *kNLearningLister) KNLearnings(namespace string) KNLearningNamespaceLister {
	return kNLearningNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KNLearningNamespaceLister helps list and get KNLearnings.
type KNLearningNamespaceLister interface {
	// List lists all KNLearnings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.KNLearning, err error)
	// Get retrieves the KNLearning from the indexer for a given namespace and name.
	Get(name string) (*v1.KNLearning, error)
	KNLearningNamespaceListerExpansion
}

// kNLearningNamespaceLister implements the KNLearningNamespaceLister
// interface.
type kNLearningNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KNLearnings in the indexer for a given namespace.
func (s kNLearningNamespaceLister) List(selector labels.Selector) (ret []*v1.KNLearning, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KNLearning))
	})
	return ret, err
}

// Get retrieves the KNLearning from the indexer for a given namespace and name.
func (s kNLearningNamespaceLister) Get(name string) (*v1.KNLearning, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("knlearning"), name)
	}
	return obj.(*v1.KNLearning), nil
}
